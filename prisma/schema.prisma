generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TransactionType {
  INCOME
  OUTCOME
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  accounts   Account[]
  categories Category[]

  @@map("users")
}

model Currency {
  id        String   @id @default(uuid())
  name      String   @unique
  symbol    String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  accounts     Account[]
  fromCurrency ExchangeRate[] @relation(name: "fromCurrency")
  toCurrency   ExchangeRate[] @relation(name: "toCurrency")

  @@map("currencies")
}

model Account {
  id            String   @id @default(uuid())
  name          String   @unique
  accountNumber String   @map("account_number")
  color         String?
  userId        String   @map("user_id")
  currencyId    String   @map("currency_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency     Currency      @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String?
  userId      String  @map("user_id")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id         String          @id @default(uuid())
  type       TransactionType
  reason     String
  amount     Int
  accountId  String          @map("account_id")
  categoryId String?         @map("category_id")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model ExchangeRate {
  id             String   @id @default(uuid())
  fromCurrencyId String   @map("from_currency_id")
  toCurrencyId   String   @map("to_currency_id")
  rate           Int
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  fromCurrency Currency @relation(name: "fromCurrency", fields: [fromCurrencyId], references: [id], onDelete: Cascade)
  toCurrency   Currency @relation(name: "toCurrency", fields: [toCurrencyId], references: [id], onDelete: Cascade)

  @@map("exchange_rates")
}
